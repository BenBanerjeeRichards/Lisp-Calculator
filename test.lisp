(defun assertEq (a b message)
    (if (not (= a b))
        (printLn (concatAll (list "FAILED (" message ")" " Expected=" a " Actual=" b))))
)

(defun printLn (x) 
    (print x)
    (print "\n")
)

(defun concatAll (x) 
    (reduce x "" 
        (lambda (a b) (concat a b)))
)

(defun testConcatAll () 
    (assertEq ("hello world") (concatAll (list "hello" " " "world")) "testConcatAll1")
    (assertEq ("hellotruenull34") (concatAll (list "hello" true null 34)) "testConcatAll2")
    (assertEq ("hello(1 false \"world\")") (concatAll (list "hello" (list 1 false "world"))) "testConcatAll3")
)

(defun append (x xs)
    (insert (length xs) x xs)
)

(defun testAppend () 
    (assertEq (list 1 2 3) (append 3 (list 1 2)) "append1")
    (assertEq (list 3) (append 3 (list)) "append2")
)

(defun map (items f)
    (def i 0)
    (def resultList (list))
    (while (< i (length items))
        (def resultList (append 
            (funcall f (nth i items))
            resultList
        ))
        (def i (+ i 1))
    )
    (resultList)
)

(defun testMap () 
    (assertEq (list 2 4 6) (map (list 1 2 3) double) "map1")
    (assertEq (list) (map (list) double) "map2")
)

(defun filter (items f)
    (def i 0)
    (def resultList (list))
    (while (< i (length items))
        (def val (nth i items))
        (if (funcall f val)
            (def resultList (append val resultList))
        )
        (def i (+ i 1))
    )
    (resultList)
)

(defun testFilter () 
    (assertEq (list 1 2 3) (filter (list 1 2 3 4 5 6 7 8 9) (lambda (x) (<= x 3)))"filter1")
)

(defun reduce (items initial f)
    (def i 0)
    (def result (if (= null initial) (nth 0 items) (initial)))
    (while (< i (length items))
        (def val (nth i items))
        (def result (funcall f result val))
        (def i (+ i 1))
    )
    (result)
)
(defun testReduce () 
    (assertEq 6 (reduce (list 1 2 3) 0 (lambda (a b) (+ a b))) "reduce1")
    (assertEq 6 (reduce (list 1 2 3) 1 (lambda (a b) (* a b))) "reduce2")
)

(defun range (from to increment)
    (if 
        (and (= increment 0) (not (= from to)))
        (panic "range will generate infinite list "))

    (def rangeSign (< from to))
    (def incrementSign (> increment 0))
    (if 
        (not (= rangeSign incrementSign))
        (panic "range will generate infinite list "))

    (def i from)
    (def result (list))

    (while (if (> increment 0) (< i to) (> i to))
        (def result (append i result))
        (def i (+ i increment))
    )
    (result)
)

(defun testRange ()
    (assertEq (list 1 2 3 4 5) (range 1 6 1) "range1")
    (assertEq (list 1 3 5) (range 1 6 2) "range2")
    (assertEq (list 5 4 3 2 1) (range 5 0 -1) "range3")
)

(defun substr (string from to)
    (def to 
    (if (>= to (length string))
        (length string)
        to))

    (if (> from to) ("")
        ((def result "")
            (def i from)
            (while (< i to)
                (def result (concat result (nth i string)))
                (def i (+ i 1)))
            (result)))
)

(defun testSubstr () 
    (assertEq "abcd" (substr "abcd" 0 4) "substr1")
    (assertEq "abc" (substr "abcd" 0 3) "substr2")
    (assertEq "ab" (substr "abcd" 0 2) "substr3")
    (assertEq "bc" (substr "abcd" 1 3) "substr4")
    (assertEq "" (substr "abcd" 3 0) "substr5")
    (assertEq "" (substr "abcd" 0 0) "substr6")
    (assertEq "a" (substr "abcd" 0 1) "substr7")
)

(defun split (string delim)
    (def result (list))
    (def acc "")
    (def i 0)
    (def n (length delim))

    (while (< i (length string))
        (def subDelim (substr string i (+ i n)))
        (if (= subDelim delim)
            (
                (def result (append acc result))
                (def acc "")
                (def i (+ i n))
            )
            (
                (def acc (concat acc (nth i string)))
                (def i (+ i 1))
            )))

    (def result (append acc result))
    (result)
)

(defun testSplit () 
    (assertEq (list "the" "quick" "brown" "fox") (split "the quick brown fox" " ") "split1")
    (assertEq (list "the" "quick" "brown" "fox" "") (split "the quick brown fox " " ") "split2")
    (assertEq (list "" " mat was sat on by " " cat by " " lamp") (split "the mat was sat on by the cat by the lamp" "the") "split3")
    (assertEq (list "" " mat was sat on by " " cat by " " lamp " "") (split "the mat was sat on by the cat by the lamp the" "the") "split4")
    (assertEq (list "the quick brown fox") (split "the quick brown fox" "@") "split5")
    (assertEq (list "the quick brown fox") (split "the quick brown fox" "deliminator") "split5")
    (assertEq (list "the quick brown fox") (split "the quick brown fox" "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa") "split5")
)

(defun first (items) (nth 0 items))
(defun second (items) (nth 1 items))

(defun test () 
    (testAppend)
    (testMap)
    (testConcatAll)
    (testFilter)
    (testReduce)
    (testRange)
    (testSubstr)
    (testSplit)
)

(defun main (args)
    (test)
)

(def xs (list 1 2 3))
(def double (lambda (x) (* x 2)))